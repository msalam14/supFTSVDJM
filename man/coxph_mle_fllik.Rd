% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/high_dimensional_long_surv_jm.R
\name{coxph_mle_fllik}
\alias{coxph_mle_fllik}
\title{Full likelihood estimation of Cox-PH model}
\usage{
coxph_mle_fllik(
  surv_time,
  censor_status,
  Xmat,
  max_iter = 25,
  cnv_type = "Param",
  cnv_crit = 1e-06,
  constant_hazard = TRUE,
  change_points = NULL
)
}
\arguments{
\item{surv_time}{a vector of N elements  represening observed survival times}

\item{censor_status}{a vector of censoring indicators (1 indicates censoring)}

\item{cnv_type}{on which quantity the algorithm would be terminated (the
default is "par", indicating maximum difference in parameters will be used)}

\item{cnv_crit}{threshold for iteration termination}

\item{constant_hazard}{a logical indicting whether a constant hazard will be
used (default is TRUE). If FALSE, a piecewise constant hazard will be fitted}

\item{change_points}{the change_points to be used when a piecewise constant
hazard function is fitted. The default is NULL, indicating deciles from the
observed survival times will be used as change points.}

\item{survX}{time-independent covariates specific to the survival sub-model}

\item{maxiter}{Maximum number of iteration. Default: 25.}
}
\value{
a list with following items
\itemize{
\item CoxPH_obj : estimated baselize hazard, cumulative hazard, estimated
parameters, and other quantities related to the survival sub-model
\item cnvrgn : change in parameter estimates and likelihood at different
iterations
\item rc_thresh : final threshold used to terminate the algorithm
}
}
\description{
This function maximizes full likelihood function induced by the Cox
Proportional hazard model. Essentially it takes the estimates from coxph of
survival package as initial estimates and obtain piecewise or constant hazard
estimates. It repeats this steps until the likelihood increases.
}
\examples{
# Number of subjects
n<-500

# feature dimension
pdim<-c(200)
# No of rank-1 components
r<-3
model_rank<-r

# Weight for components
lmd_val<-c(5.20,4.80,3.35)

# noise variance in tensor
Tau2<-c(0.1)

# Parameters for supervised component
Eta2<-c(1,1,1)

#diag(Eta2)<-c(1.85,2.50,1.3,1.60,1.25,3.5)
gam_par<-matrix(c(2.2,1.6,2.5,3.6,-1.50,2.6),ncol=3)
gam_par<-apply(gam_par,2,function(u){u/sqrt(sum(u^2))})

# Grid of Time points
nres<-101
Time<-seq(0,1,length.out=nres)

# Singular Function
PhiFunc<-list(function(x){(8+(6*x^8)-(3*x^2)-(4*x^3))/sqrt(45.61)},
              function(x){(10*x^2/exp(x^5))/(sqrt(10-10*exp(-2)))},
              function(x){sqrt(2)*sin(2.5*pi*x)})

PhiF<-sapply(1:r,function(k){PhiFunc[[k]](Time)})

# Feature loading
set.seed(pdim)
Bval<<-sapply(1:r, function(b){runif(pdim)})
bval<<-Bval*outer(rep(1,pdim),1/apply(Bval,2,norm,type="2"))

# controlling the signal ot noise ratio
cmp_var<-((lmd_val^2)*Eta2)
CmpV<-Reduce(`+`,lapply(1:r,function(k){cmp_var[k]*(outer(bval[,k],
                                                          PhiF[,k]))^2}))


# Survival parameters
alp_par<-matrix(c(3.50,2.60,-0.15,-0.20,0.15),ncol=1)
lmd<-0.10
## Subject-specific covariates # ADAS13
set.seed(n)
Vmat<<-cbind(round(runif(n),2),round(rbeta(n,2.5,1.5),2))
EAval<-Vmat\%*\%gam_par
miv_subE<-sapply(Eta2,function(u){rnorm(n,mean=0,sd=sqrt(u))})
ZetaSL<-EAval+miv_subE

# Training data set
# Survival data generation
seed_n<-4
set.seed(seed_n*24) # for both survival and longitudinal data
surv_time<-(-log(runif(n,0,1)))/(lmd*exp(as.numeric(cbind(Vmat,
                                                          ZetaSL)\%*\%(alp_par))))
summary(surv_time)
censor_time<-runif(n,0,5)
survT<-apply(cbind(surv_time,censor_time),1,min)
#summary(survT)
cenI<-apply(cbind(surv_time,censor_time),1,which.min)-1
cen_indx<-which(survT>1)
survT[cen_indx]<-1
cenI[cen_indx]<-1

fit_coxph<-coxph_mle_fllik(surv_time = survT,censor_status = cenI,
                           Xmat = cbind(Vmat,ZetaSL),max_iter = 25,
                           cnv_type = "LL",cnv_crit = 1e-6,
                           constant_hazard = "FALSE",change_points = NULL)
}
